One To One
Bu ilişki türümüz temel seviye ilişki bire bir ilişki olarak adlandırıyoruz Türkçe’de, bu ilişki türüne bir örnek gösterecek olursak bir kullanıcımız mevcut bu kullanıcımızın özgeçmiş’ini tutuyoruz ve her kullanıcımızın bir özgeçmişi olabiliyor ve her özgeçmiş bir kullanıcıya ait olabilir. İlişkilerini kurabilmek için Özgeçmiş tablomuza bir user_id adında bir kolon ile bu işlemleri çok basit bir şekilde yapabiliriz.
Hemen ilişki kuralım bunun için User modelimize giderek alt kısımdaki kod’u ekliyoruz.
public function ozgecmis(){
    return $this->hasOne('App\Ozgecmis', 'user_id', 'id');
}

BelongsTo
BelongsTo ‘yu Türkçe’ye çevirdiğimizde kelime anlamı ait olmak gibi düşünebiliriz. Daha açıklayıcı olursak sahiplik bulma amacıyla kullanılmaktadır. Yani bu özgeçmiş hangi kullanıcıya ait gibi düşünebiliriz.
Hemen ilişki kuralım bunun için Ozgecmis modelimize giderek alt kısımdaki kod’u ekliyoruz.
public function user(){
    return $this->belongsTo('App\User', 'user_id', 'id');
}

One To Many
Bu ilişkideki işlemimiz bire çok ilişki düşünmemiz gereken nokta bir kullanıcımız var ve bu kullanıcımız makaleler yazıyor. Yani bir kullanıcımız birden çok makaleye sahip olabilirken, bir makalemiz sadece bir kullanıcıya ait olabiliyor.
Hemen ilişki kuralım bunun için User modelimize giderek alt kısımdaki kod’u ekliyoruz.
public function makalaleler(){
    return $this->hasMany('App\Makale', 'user_id', 'id');
}
İlgili verilere ise alt kısımdaki kod ile de ulaşabiliriz.
$makaleler= App\User::find(1)->makaleler;
foreach ($makaleler as $makale) {
    //
}
Bir makalenin kullanıcıya ait olduğunu ise BelongsTo ilişki yöntemiyle ulaşabiliriz.

Many To Many
Bu ilişki yönetiminde ise çoka çok ilişki yöntemi düşünmemiz gerekirse bir e-ticaret sisteminde birden fazla kullanıcı olabileceği gibi birden fazlada ürün olabilir ve bir kullanıcı birden fazla ürün alabilir. Bir ürün ise birden fazla kullanıcıya satılabilir. Bu işlemleri yapabilmemiz için aracı bir tabloya ihtiyaç duymaktayız. Bu aracı olan tablomuza pivot tablo diyoruz. Bu tabloda bir model’e ihtiyaç duymamaktayız. Fakat size kalmış bir model ile kontrol edebilirsiniz. Bu tablo’ya isim verirken iki modeli snake case’e çevirerek birleştirmemiz işimizi laravel otomatik işlemlerde kolaylaştıracaktır. Örneğin bizim anlattığımız ilişkide Urun ve User tablolalarımız mevcut burada tablo adını urun_user olarak belirlememiz uygun olacaktır. Bu tablo içerisinde user_id ve urun_id kolonları olması yeterli olacaktır. Aslında bu tablomuzu sipariş tablosu gibi de düşünebiliriz.
Hemen ilişki kuralım bunun için User modelimize giderek alt kısımdaki kod’u ekliyoruz.
public function urunler(){
    return $this->belongsToMany('App\Urun', 'urun_user', 'user_id', 'urun_id');
}
İlgili verilere ise alt kısımdaki kod ilede ulaşabiliriz.
$siparisler = App\User::find(1)->siparisler;
foreach ($siparisler->urunler as $siparis) {
    //Burada sipariş olarak belirtim çünkü sipariş kurduğumuz ilişkide sipariş tablosu olarak düşünebiliriz.
    //Kullanıcımızın verdiği sipariş ürünlerine bu şekilde ulaşabiliriz.
}

Belongs To Many
Bu ilişki yönetiminde ise çoka çok ilişki yöntemimizin tam tersi ilişki yani bu urunu hangi kullanıcılar sipariş vermiş gibi düşünebiliriz. Aslında aynı işlem sadece dikkat etmemiz gereken nokta tamlamalarda kolon isimlerinin sıralamasıdır.
Hemen ilişki kuralım bunun için Urun modelimize giderek alt kısımdaki kod’u ekliyoruz.
public function user(){
    return $this->belongsToMany('App\User', 'urun_user', 'urun_id', 'user_id');
}
İlgili verilere ise alt kısımdaki kod ilede ulaşabiliriz.
$urunler= App\Urun::find(1);
foreach ($urunler->user as $user) {
    //Burada ise 1 id'sine sahip ürünü hangi kullanıcıların aldığını sıralayabiliriz.
}

Many To Many Pivot
Bunda anlatacağımız işlem bir ilişki değil sadece pivot tablomuza ekleyeceğimiz kolonların gösterileceği hakkında çünkü laravel sadece ilişkili olduğunu kolon tabloları gösterimini yapmaktadır. Örneğin kullanıcımız bir ürün alıyor ama bu ürünü ne zaman aldığını veya hangi kargo şirketi ile aldığını biz bu ara tablo (pivot) tablomuzda tutmak istiyoruz bunun için alt kısımdaki kod’a başvurabiliriz.
public function urunler(){
    return $this->BelongsToMany('App\Urun')->withTimestamps();
// withTimestamps ile gösterime timestamps'leride ekleyebiliriz.
}
Özel bir kolon açıp göstermek istersek alt kısımdaki gibi kullanabiliriz.
public function urunler(){
    return $this->BelongsToMany('App\Urun')->withPivot('kargo');
// Bu şekilde ise kargo kolonunu gösterime ekleyebiliriz.
}

Has Many Through
Through kelime anlamıyla aracılığıyla olarak adlandırabiliriz. Bu ilişkide düşünmemiz gerekirse sehirler adında bir tablomuz olsun ve kullanıcılarımızın da her biri bir şehir’e ait olsun. Bu işlemi yapabilmemiz için tabi ki kullanıcılarımız bulunduğu tabloya sehir_id adında bir kolon açarak sehir tablosuyla ilişki kurabileceğimiz bir işlem yapmamız gerekiyor. Bizim istediğimiz İstanbul olarak sehir_id kolonunda belirtilmiş kullanıcılarımızın makalelerine ulaşalım. Yani belirtiğimiz şehir ile kullanıcılara ulaşıp, buradan ise makalelere ulaşmak istiyoruz, burada kullanıcılar tablomuzu aracı olarak kullanacağız.
Hemen ilişki kuralım bunun için Sehir modelimize giderek alt kısımdaki kod’u ekliyoruz.
public function makaleler(){
        return $this->hasManyThrough(
            'App\Makale', 'App\User',
            'sehir_id', 'user_id', 'id'
        );
    // İlk önce ulaşmak istediğimiz model diğeri ise bize bu modele ulaşırken aracılık edecek olarak model.
    // Tamlamada ise aracı model ve mevcut model ile ilişkili olan kolon adı (sehir_id) yani kullanicilar tablosunuda tuttuğumuz kolon, ikinci ise ulaşmak istediğimiz aracı tablo ile ilişkili olan kolon ismi olarak adlandırabiliriz. Yani makaleler tablosunda yer alan user_id kolonu. Son tamlama ise local id'dir.
}

One To Many Polymorphic Relations
Bu diğer yazımızda anlattığımız bire çok ilişkiden biraz daha bağımsız bir yapı bulunuyor. Anlatmam gerekirse bir tablo’yu ihtiyaçlarımız dahilinde ayarlayarak ilerde hiç bir değişiklik yapmadan ekleme yaptığımızda işleyişi bozulmadan devam edebilecek bir yapıdır. Örneklerle anlatırsak bir beğeni sistemimiz olsun ve bu beğenileri tuttuğumuz bir tablomuz olsun, bu tabloyu ilerde olabilecek yeni eklemelerde hiç bir değişiklik yapmadan yeni sistemle uyumlu olması gerekiyor bunu Polymorphic ilişkilerde çok basit bir şekilde yapabileceğiz. Gelelim yapacağımız işlemlere bir makale tablomuz olsun ve bu makalelere yapılan yorumlar olsun birde harici olarak bu iki tablonun beğenilerini kayıt ettiğimiz bir tablo olsun.
Yukarıda verdiğim ilişki ile yeni bir likes adında bir tablo oluşturma içerisindeyiz bu tablo kolonları ise; likeable_id ve likeable_type adında iki kolon oluşturuyoruz, likeable_id kolonuna örneğin bu bir makaleye ait beğeni ise hangi makalenin beğenisi olduğunu belirteceğiz yani benzersiz bir id girişi yapacağız, likeable_type kısmında ise bunun bir makaleye ait mi yoksa bir yoruma ait yoksa ilerde eklenecek yeni bir beğeni sistemine mi ait olacak bunu belirteceğiz bunu belirtirken direk olarak modelin tam adının girilmesi gerekmektedir (Örn. App\Post). Eğer mantığını anlatabildiysem gelelim kod yapılarına.
Likes modeline alt kısımdaki kodu ekleyelim.
public function likeable()
{
    return $this->morphTo();
}
Üst kısımdaki kod’da bu beğeni neye ait birine ait birine ait ise bu biri kim ile bu veriye ulaşıyoruz. Bunu sistem likeable_type kolonuna yaptığınız girişe bakarak yapmaktadır.
Şimdi Gelelim Post modelimize yani makalelerimizi kontrol ettiğimiz modele, bunda ise ilgili makalenin beğenilerine ulaşıyoruz.
public function likes()
{
    return $this->morphMany('App\Like', 'likeable');
    //likeable kısmını tabloda belirttiğimiz kısımdır tablo değiştirtirsek burada da değiştirilmesi gerekmektedir. Sistem sonuna otomatik _id ve _type girişini yapmaktadır.
}
Şimdi gelelim Comment yani yorumları kontrol ettiğimiz modele bunda ise ilgili yorumunu beğenilerine ulaşıyoruz.
public function likes()
{
    return $this->morphMany('App\Like', 'likeable');
    //likeable kısmını tabloda belirttiğimiz kısımdır tablo değiştirtirsek burada da değiştirilmesi gerekmektedir. Sistem sonuna otomatik _id ve _type girişini yapmaktadır.
}
Bir örnekle ulaşımını anlatırsak alt kısımdaki kod’a başvurabiliriz.
$post = App\Post::find(1);
foreach ($post->likes as $like) {
    //
}
Dönen veriye dd() ile kontrol ederseniz, dönen veri collection veridir yani bunu ->likeable_type olarak gösteremeyiz. Bunun için bir foreach döngüsü içerisinde kontrol ediyoruz.

Many To Many Polymorphic Relations
Bu anlatacağımız ilişkide ise yine tamamen üst kısımdaki ilişkiye benzer bir ilişki kuracağız bu örneğimizdeki işlem ise oluşturduğumuz bir yazıda, yazıya verdiğimiz etiketlerin aynı anda bu yazıya ekleyeceğimiz videolara’da eklenmesini istiyoruz. Yani daha açıklayıcı olursak bir etiket hem bir yazıya ait olabilir, hemde bir video’ya ait olabilir veya birden fazla yazı veya birden fazla video bu tag’a ait olabilir. Bu işlem için Relationships’te anlatmış olduğum pivot mantığını burada kullanacağız. Öncelikle oluşturacağımız tabloları belirtelim. Post ve video tablolarının oluşturulduğunu varsayalım. Geriye iki tablo kalıyor bunlardan biri tags tablosu burada ekleyeceğimiz tagları yazıyoruz. Kolonlar sadece id,name olacak şekilde ayarlıyoruz. Diğer tablomuz ise pivot olan taggables tablosu bu kısımda dikkat edilmesi gereken nokta sonuna eklediğimiz “s” takısını daha sonra bir müdahale sonucu değiştirilmiyor olmasıdır. Yani biz bu tabloya taglar adını verir isek Many To Many Polymorphic ilişkide sonuna “s” takısını otomatik ekleyecek ve yapı çalışmaz hale gelecektir. Bunun için bu gibi durumlarda tablo adını taglars verilmesi gerekmektedir. Bu tablomuzda ise kolonlarımız tag_id,taggable_id ve taggable_type ‘dir. Burada tag_id tags tablosuna eklediğimiz tablosunun id’sidir. taggable_id ise taggable_type kolonunda belirttiğimiz modelin tablosundaki benzersiz id’dir. Veritabanlarını oluşturulması sırasında pivot tablo için harici bir model oluşturulması gerekmemektedir.
Şimdi ise Post modeline gelerek ilgili ilişki kod’unu yazıyoruz. Aynı kod’u video modeline eklediğinizde ise yine çalışacaktır. Bu şekilde ne oldu derseniz bir tag modülü oluşturarak tüm projenin hizmetine sunmuş olacağız. İlerleyen günlerde sadece Tag model’ini güncelleyerek mesela resim sistemine de tag eklemeyi çok basit bir şekilde getirebiliriz.
public function tags()
{
    return $this->morphToMany('App\Tag', 'taggable');
    // Üste belirttiğim gibi taggable tablo ismini belirtiyoruz, laravel ise sonuna "s" takısını otomatik ekliyor.
}
Bu işlemi tersten yapıldığını düşünürsek yani 1 id’ye sahip tag hangi post veya videoya ait bunun tespitini yapabilmek için ilgili kodumuzu Tag Modelimiz içerisine yazıyoruz.
public function posts()
{
    return $this->morphedByMany('App\Post', 'taggable');
}
/**
 * Bu şekilde örneklerle tag sistemi geliştirilebilir.
 */
public function videos()
{
    return $this->morphedByMany('App\Video', 'taggable');
}
Üst kısımdaki eklemeleri yaptığımıza göre bunu görüntüleme ve kontrol ise alt kısımdaki kod’u kullanabiliriz.
Post’ların Taglarına ulaşabilmek için kodumuz;
$post = App\Post::find(1);
foreach ($post->tags as $tag) {
    //
}
1 Id’ye sahip tag’ın hangi videolara ait olduğunu kontrol edelim.
$tag = App\Tag::find(1);
foreach ($tag->videos as $video) {
    //
}
İlişkilerde Query Builder Methodları
User::has('post')->get(); //Sadece Yazısı olan kullanıcıları getir.
User::has('post','>',3)->get(); //3'den fazla yazısı olan kullanıcıları getir.
User::withCount(['post','product'])->get(); //Kullanıcıların yazı ve ürün sayılarını getirir.
